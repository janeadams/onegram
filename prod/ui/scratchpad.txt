console.log("loaded visualization.js")

function setSizing() {
    params.sizing[0] = 0.8 * (document.documentElement.clientWidth)
    //console.log("Updating width to...", params.sizing[0])
    params.sizing[1] = 0.6 * (document.documentElement.clientHeight)
    //console.log("Updating height to...", params.sizing[1])
}

function setRanges() {
    //console.log("Setting ranges...")
    // Lists of all date and metric min/max:
    var xmins = []
    var xmaxes = []
    var ymaxes = []
    querydata.forEach(function(data) {
        xmins.push(data.xrange[0])
        xmaxes.push(data.xrange[1])
        ymaxes.push(data.yrange[1])
    })
    params.xrange = [d3.min(xmins), d3.max(xmaxes)]
    params.yrange[0] = d3.max(ymaxes) * 1.2
    if (params['metric'] == 'freq') {
        params.yrange[1] = 0
    } else {
        params.yrange[1] = 1
    }
}

function drawTimeseries() {
    setRanges()
    var lineOpacity = "1.0";
    var lineOpacityHover = "1.0";
    var otherLinesOpacityHover = "0.3";
    var lineStroke = "1.5px";
    var lineStrokeHover = "2.5px";

    //console.log('params.xrange =', params.xrange, '  params.yrange =', params.yrange)
    //console.log("Drawing all timeseries...")
    // Determine the chart area sizing based on the window size
    //console.log("Setting margins...")
    // Set the sizing and margins for the main chart

    // Clear any leftover charting stuff from before
    d3.select("#dataviz").selectAll("svg").remove()
    //console.log("Setting scales...")
    // Set the time scale for the main chart

    console.log("Adding timeseries lines...")

    function drawTimeseries() {

        var margin = { top: 0.1 * (params.sizing[1]), right: 0.15 * (params.sizing[0]), bottom: 0.25 * (params.sizing[1]), left: 0.15 * (params.sizing[0]) }
        var width = params.sizing[0] - margin.left - margin.right
        var height = params.sizing[1] - margin.top - margin.bottom

        var xScale = d3.scaleTime()
            .domain(params.xrange).range([0, width])

        // Choose and set time scales (logarithmic or linear)
        if (params["scale"] == "log") {
            // If 'logarithmic' option is chosen (by default:)
            var yScale = d3.scaleLog().domain(params.yrange)
        } else {
            // If 'logarithmic' option deselected, use linear time scale:
            var yScale = d3.scaleLinear().domain(params.yrange)
        }

        // When showing ranks...
        if (params['metric'] == 'rank') {
            // Put rank #1 at the top
            yScale.range([height, 1])
        }
        // When showing any other metric...
        else {
            // Put the highest number at the top
            // and start at 0
            yScale.range([0, height])
        }

        // Add brushing
        //console.log("Adding brushing...")
        var brush = d3.brushX().extent([
            [0, 0],
            [width, height]
        ]).on("end", brushChart)

        var line = d3.line()
            .x(function(d) { return xScale(d.x) }) // set the x values for the line generator
            .y(function(d) { return yScale(d.y) }) // set the y values for the line generator 
            .curve(d3.curveMonotoneX) // apply smoothing to the line

        // Create a chart area and set the size
        console.log("Creating chart area...")
        var chart = d3.select("#timeseries").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .attr('class', 'chart')

        // Create the main chart area
        var focus = chart.append("g")
            .attr("class", "focus")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

        focus.attr("class", "brush")
            .call(brush)

        console.log("Appending clipping path...")
        focus.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height)
            .attr("x", 0)
            .attr("y", 0)

        // Draw the main chart's xAxis
        console.log("Drawing xaxis...")
        focus.append("g")
            .attr("class", "xaxis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(xScale)) // Create an axis component with d3.axisBottom

        // X-Axis label:
        chart.append("text")
            .attr("transform",
                "translate(" + ((width / 2) + margin.left) + " ," +
                (height + margin.bottom) + ")")
            .style("text-anchor", "middle")
            .text("Date")

        // Draw the yAxis
        console.log("Drawing yaxis...")
        focus.append("g")
            .attr("class", "yaxis")
            .call(d3.axisLeft(yScale).ticks(10, ""))

        // Y-Axis label:
        chart.append("text")
            .attr("y", height / 2)
            .attr("x", margin.right / 2)
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            // Title case:
            .text(String(params['metric']).charAt(0).toUpperCase() + String(params['metric']).slice(1));

        // Clip the data in the main chart to the brushed region
        var masked = focus.append("g").attr("clip-path", "url(#clip)")

        console.log("Drawing storyGroup...")
        var storyGroup = masked.selectAll('.story-group')
            .data(querydata).enter()
            .append('g')
            .attr('class', 'story-group')
            .on("mouseover", function(d, i) {
                focus.append("text")
                    .attr("class", "title-text")
                    .style("fill", colors.dark[d.colorid])
                    .text(d.word)
                    .attr("text-anchor", "right")
                    .attr("x", 30)
                    .attr("y", 10)
                    .attr("id", d.word + "-group")
                    .style("font-weight", "bold")
            })
            .on("mouseout", function(d) {
                focus.select(".title-text").remove();
            })

        console.log("Drawing storyLine...")
        var storyLine = storyGroup.append('path')
            .attr('class', 'line')
            .attr('d', function(d) { return line(d.pairs) })
            .style('stroke', function(d, i) { return colors.hue[d.colorid] })
            .style('opacity', lineOpacity)
            .on("mouseover", function(d) {
                d3.selectAll('.line')
                    .style('opacity', otherLinesOpacityHover)
                d3.select(this)
                    .style('opacity', lineOpacityHover)
                    .style("stroke-width", lineStrokeHover)
                    .style("cursor", "pointer")
            })
            .on("mouseout", function(d) {
                d3.selectAll(".line")
                    .style('opacity', lineOpacity)
                d3.select(this)
                    .style("stroke-width", lineStroke)
                    .style("cursor", "none")
            })

        console.log("Drawing dayDots...")
        var dayDots = storyGroup.selectAll(".dot").data(querydata).enter().append("circle").attr("class", "dot")
            .attr("cx", function(d, i) { return xScale(d.x) })
            .attr("cy", function(d) { return yScale(d.y) })
            .attr("r", 2)
            .style("fill", function(d, i) { return colors.light[d.colorid] })
            .style("stroke", function(d, i) { return colors.dark[d.colorid] })
            .on("mouseover", function(a, b, c) {
                d3.select(this).classed('dot', false).classed('focus', true)
            })
            .on("mouseout", function() {
                d3.select(this).classed('focus', false).classed('dot', true)
            })
        // A function that set idleTimeOut to null
        var idleTimeout

        function idled() { idleTimeout = null; }

        function updateAxis() {
            // Update axis
            d3.select(".xaxis").transition().duration(1000).call(d3.axisBottom(xScale))
            focus
                .selectAll(".line")
                .transition().duration(1000)
                .attr('d', function(d) { return line(d.pairs) })
        }

        // A function that update the chart for given boundaries
        function brushChart() {

            //console.log(d3.event)
            var ext = d3.event.selection
            //console.log("Updating axis to ext ", ext)

            // If no selection, back to initial coordinate. Otherwise, update X axis domain
            if (!ext) {
                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit
                setRanges()
                xScale.domain(params.xrange)
                //console.log("params.xrange = ", params.xrange)
            } else {
                params.xrange = [xScale.invert(ext[0]), xScale.invert(ext[1])]
                //console.log("params.xrange = ", params.xrange)
                xScale.domain(params.xrange)
                //masked.selectAll('.story-group').select(".brush").call(brush.move, null)
                // This remove the grey brush area as soon as the selection has been done
                chart.select(".brush").call(brush.move, null)
            }

            updateAxis();

        }

    }

    drawTimeseries()

    function drawSubplot(data) {

        var width = 300;
        var height = 100;
        var margin = { top: 10, right: 10, bottom: 10, left: 10 }

        var xScale = d3.scaleTime()
            .domain(params.xrange).range([0, width])

        xScale.range([0, width])

        // Choose and set time scales (logarithmic or linear)
        if (params["scale"] == "log") {
            // If 'logarithmic' option is chosen (by default:)
            var yScale = d3.scaleLog().domain(params.yrange)
        } else {
            // If 'logarithmic' option deselected, use linear time scale:
            var yScale = d3.scaleLinear().domain(params.yrange)
        }

        // When showing ranks...
        if (params['metric'] == 'rank') {
            // Put rank #1 at the top
            yScale.range([height, 1])
        }
        // When showing any other metric...
        else {
            // Put the highest number at the top
            // and start at 0
            yScale.range([0, height])
        }

        // Create a chart area and set the size
        console.log("Creating subplot chart svg...")
        var subPlot = d3.select("#subplot-list").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .attr('class', 'sub-plot')
            .style('float', 'left')
            .style('display', 'inline-block')

        var subFocus = subPlot.append("g").attr("class", "sub-focus")

        subFocus.append("g")
            .attr("class", "xaxis")
            .call(d3.axisBottom(xScale)) // Create an axis component with d3.axisBottom

        subFocus.append("g")
            .attr("class", "yaxis")
            .call(d3.axisLeft(yScale)) // Create an axis component with d3.axisBottom

        console.log("Drawing subGroups...")
        var subGroup = subFocus.selectAll('.sub-group')
            .datum(data).enter()
            .append('g')
            .attr('class', 'sub-group')
            .attr('class', String(data))

        console.log("Drawing subLines...")
        var subLine = subGroup.append('path')
            .attr('class', 'line')
            .attr('d', function(d) { return line(d.pairs) })
    }

    params['queries'].forEach(function(d) {
        drawSubplot(d)
    })

}


var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 300 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;
var data = [
   {
       "State": "CA",
       "Under 5 Years": 2704659,
       "5 to 13 Years": 4499890,
       "14 to 17 Years": 2159981,
       "18 to 24 Years": 3853788,
       "25 to 44 Years": 10604510,
       "45 to 64 Years": 8819342,
       "65 Years and Over": 4114496
   },
   {
       "State": "TX",
       "Under 5 Years": 2027307,
       "5 to 13 Years": 3277946,
       "14 to 17 Years": 1420518,
       "18 to 24 Years": 2454721,
       "25 to 44 Years": 7017731,
       "45 to 64 Years": 5656528,
       "65 Years and Over": 2472223
   },
   {
       "State": "NY",
       "Under 5 Years": 1208495,
       "5 to 13 Years": 2141490,
       "14 to 17 Years": 1058031,
       "18 to 24 Years": 1999120,
       "25 to 44 Years": 5355235,
       "45 to 64 Years": 5120254,
       "65 Years and Over": 2607672
   },
   {
       "State": "FL",
       "Under 5 Years": 1140516,
       "5 to 13 Years": 1938695,
       "14 to 17 Years": 925060,
       "18 to 24 Years": 1607297,
       "25 to 44 Years": 4782119,
       "45 to 64 Years": 4746856,
       "65 Years and Over": 3187797
   },
   {
       "State": "IL",
       "Under 5 Years": 894368,
       "5 to 13 Years": 1558919,
       "14 to 17 Years": 725973,
       "18 to 24 Years": 1311479,
       "25 to 44 Years": 3596343,
       "45 to 64 Years": 3239173,
       "65 Years and Over": 1575308
   },
   {
       "State": "PA",
       "Under 5 Years": 737462,
       "5 to 13 Years": 1345341,
       "14 to 17 Years": 679201,
       "18 to 24 Years": 1203944,
       "25 to 44 Years": 3157759,
       "45 to 64 Years": 3414001,
       "65 Years and Over": 1910571
   }];
var x0 = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var x1 = d3.scale.ordinal();

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.ordinal()
    .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

var xAxis = d3.svg.axis()
    .scale(x0)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(d3.format(".1s"));

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
 .call(d3.behavior.zoom().scaleExtent([1, 10]).on("zoom", zoom));

//d3.csv("data.csv", function(error, data) {
var ageNames = d3.keys(data[0]).filter(function(key) { return key !== "State"; });
     console.log("ageNames="+JSON.stringify(ageNames));
data.forEach(function(d) {
    d.ages = ageNames.map(function(name) { return {name: name, value: +d[name]}; });
      console.log("d.ages="+JSON.stringify(d.ages));
  });

  x0.domain(data.map(function(d) { return d.State; }));
  x1.domain(ageNames).rangeRoundBands([0, x0.rangeBand()]);
  y.domain([0, d3.max(data, function(d) { 
      console.log(" before retuen d.ages="+d.ages);
  return d3.max(d.ages, function(d) 
  { console.log("d.value;="+d.value);
  return d.value; }); 
  })]);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".5em")
      .style("text-anchor", "end")
      .text("Population");

var mask = svg.append("defs")
  .append("clipPath")
  .attr("id", "mask")
    .append("rect")
    .attr({
    	x: 0,
    	y: 0,
      width: width,
      height: height + margin.bottom,
    })
  
var masked = svg.append("g")
  .attr("clip-path", "url(#mask)")
  
masked.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);
      
var allStates = masked
  .append("g")
    .attr("class", "allStates");

  var state = svg.selectAll(".state")
      .data(data)
    .enter().append("g")
      .attr("class", "state")
      .attr("transform", function(d) { return "translate(" + x0(d.State) + ",0)"; });

 var state = allStates.selectAll(".state")
  .data(data)
  .enter().append("g")
  .attr("class", "state")
  .attr("transform", function(d) { return "translate(" + x0(d.State) + ",0)"; });

  state.selectAll("rect")
      .data(function(d) { return d.ages; })
    .enter().append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x1(d.name); })
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function(d) { return color(d.name); });
var legnColorGap=height/17.5;
  var legend = svg.selectAll(".legend")
      .data(ageNames.slice().reverse())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * legnColorGap + ")"; });
var lwidth=width/75 , lht=height/22,lwidth1=lwidth+2;
  legend.append("rect")
      .attr("x", width - lwidth1)
      .attr("width", lwidth)
      .attr("height", lht)
      .style("fill", color);
var textht=lht/2,textwd=textht+lwidth;
  legend.append("text")
      .attr("x", width - textwd)
      .attr("y", textht)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });
 function zoom() {
svg.select(".allStates").attr("transform", "translate(" + d3.event.translate[0]+",0)scale(" + d3.event.scale + ",1)");
svg.select(".x.axis").attr("transform", "translate(" + d3.event.translate[0]+","+(height)+")").call(xAxis.scale(x0.rangeRoundBands([0, width * d3.event.scale],.5 * d3.event.scale)));
svg.select(".y.axis").call(yAxis);
}

%F0%9F%98%82
