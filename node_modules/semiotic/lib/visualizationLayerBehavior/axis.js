"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTickValues = generateTickValues;
exports.axisPieces = axisPieces;
exports.axisLines = exports.axisLabels = void 0;

var React = _interopRequireWildcard(require("react"));

var _semioticMark = require("semiotic-mark");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var defaultTickLineGenerator = function defaultTickLineGenerator(_ref) {
  var xy = _ref.xy,
      orient = _ref.orient,
      i = _ref.i,
      baseMarkProps = _ref.baseMarkProps,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className;
  return React.createElement(_semioticMark.Mark, _extends({
    key: i,
    markType: "path",
    renderMode: xy.renderMode,
    stroke: "black",
    strokeWidth: "1px",
    simpleInterpolate: true,
    d: "M".concat(xy.x1, ",").concat(xy.y1, "L").concat(xy.x2, ",").concat(xy.y2),
    className: "tick-line tick ".concat(orient, " ").concat(className)
  }, baseMarkProps));
};

function generateTickValues(tickValues, ticks, scale) {
  var axisSize = Math.abs(scale.range()[1] - scale.range()[0]);

  if (!tickValues) {
    if (!ticks) {
      ticks = Math.max(1, Math.floor(axisSize / 40));
    }

    tickValues = scale.ticks(ticks);
  }

  return tickValues;
}

function axisPieces(_ref2) {
  var _ref2$renderMode = _ref2.renderMode,
      renderMode = _ref2$renderMode === void 0 ? function () {
    return undefined;
  } : _ref2$renderMode,
      _ref2$padding = _ref2.padding,
      padding = _ref2$padding === void 0 ? 5 : _ref2$padding,
      scale = _ref2.scale,
      ticks = _ref2.ticks,
      _ref2$tickValues = _ref2.tickValues,
      tickValues = _ref2$tickValues === void 0 ? generateTickValues(undefined, ticks, scale) : _ref2$tickValues,
      _ref2$orient = _ref2.orient,
      orient = _ref2$orient === void 0 ? "left" : _ref2$orient,
      size = _ref2.size,
      _ref2$footer = _ref2.footer,
      footer = _ref2$footer === void 0 ? false : _ref2$footer,
      _ref2$tickSize = _ref2.tickSize,
      tickSize = _ref2$tickSize === void 0 ? footer ? -10 : ["top", "bottom"].find(function (d) {
    return d === orient;
  }) ? size[1] : size[0] : _ref2$tickSize;
  //returns x1 (start of line), x2 (end of line) associated with the value of the tick
  var axisDomain = [],
      position1,
      position2,
      domain1,
      domain2,
      tposition1,
      tposition2,
      textPositionMod = 0,
      textPositionMod2 = 0,
      defaultAnchor = "middle";

  switch (orient) {
    case "top":
      position1 = "x1";
      position2 = "x2";
      domain1 = "y1";
      domain2 = "y2";
      axisDomain = [0, tickSize];
      tposition1 = "tx";
      tposition2 = "ty";
      textPositionMod -= 20 - padding;
      break;

    case "bottom":
      position1 = "x1";
      position2 = "x2";
      domain1 = "y2";
      domain2 = "y1";
      axisDomain = [size[1], size[1] - tickSize];
      tposition1 = "tx";
      tposition2 = "ty";
      textPositionMod += 20 + padding;
      break;

    case "right":
      position1 = "y2";
      position2 = "y1";
      domain1 = "x2";
      domain2 = "x1";
      axisDomain = [size[0], size[0] - tickSize];
      tposition1 = "ty";
      tposition2 = "tx";
      textPositionMod += 5 + padding;
      textPositionMod2 += 5;
      defaultAnchor = "start";
      break;
    //left

    default:
      position1 = "y1";
      position2 = "y2";
      domain1 = "x1";
      domain2 = "x2";
      axisDomain = [0, tickSize];
      tposition1 = "ty";
      tposition2 = "tx";
      textPositionMod -= 5 + padding;
      textPositionMod2 += 5;
      defaultAnchor = "end";
      break;
  }

  var generatedTicks = tickValues instanceof Function ? tickValues({
    orient: orient
  }) : tickValues;
  return generatedTicks.map(function (tick, i) {
    var _ref3;

    var tickPosition = scale(tick);
    return _ref3 = {}, _defineProperty(_ref3, position1, tickPosition), _defineProperty(_ref3, position2, tickPosition), _defineProperty(_ref3, domain1, axisDomain[0]), _defineProperty(_ref3, domain2, axisDomain[1]), _defineProperty(_ref3, tposition1, tickPosition + textPositionMod2), _defineProperty(_ref3, tposition2, axisDomain[0] + textPositionMod), _defineProperty(_ref3, "defaultAnchor", defaultAnchor), _defineProperty(_ref3, "renderMode", renderMode(tick, i)), _defineProperty(_ref3, "value", tick), _ref3;
  });
}

var axisLabels = function axisLabels(_ref4) {
  var axisParts = _ref4.axisParts,
      tickFormat = _ref4.tickFormat,
      _ref4$rotate = _ref4.rotate,
      rotate = _ref4$rotate === void 0 ? 0 : _ref4$rotate,
      _ref4$center = _ref4.center,
      center = _ref4$center === void 0 ? false : _ref4$center,
      orient = _ref4.orient;
  return axisParts.map(function (axisPart, i) {
    var renderedValue = tickFormat(axisPart.value, i);

    if (_typeof(renderedValue) !== "object" || renderedValue instanceof Date) {
      renderedValue = React.createElement("text", {
        textAnchor: axisPart.defaultAnchor,
        className: "axis-label"
      }, renderedValue.toString ? renderedValue.toString() : renderedValue);
    }

    var textX = axisPart.tx;
    var textY = axisPart.ty;

    if (center) {
      switch (orient) {
        case "right":
          textX -= (axisPart.x2 - axisPart.x1) / 2;
          break;

        case "left":
          textX += (axisPart.x2 - axisPart.x1) / 2;
          break;

        case "top":
          textY += (axisPart.y2 - axisPart.y1) / 2;
          break;

        case "bottom":
          textY -= (axisPart.y2 - axisPart.y1) / 2;
          break;
      }
    }

    return React.createElement("g", {
      key: i,
      pointerEvents: "none",
      transform: "translate(".concat(textX, ",").concat(textY, ") rotate(").concat(rotate, ")"),
      className: "axis-label"
    }, renderedValue);
  });
};

exports.axisLabels = axisLabels;

var axisLines = function axisLines(_ref5) {
  var axisParts = _ref5.axisParts,
      orient = _ref5.orient,
      _ref5$tickLineGenerat = _ref5.tickLineGenerator,
      tickLineGenerator = _ref5$tickLineGenerat === void 0 ? defaultTickLineGenerator : _ref5$tickLineGenerat,
      baseMarkProps = _ref5.baseMarkProps,
      className = _ref5.className;
  return axisParts.map(function (axisPart, i) {
    return tickLineGenerator({
      xy: axisPart,
      orient: orient,
      i: i,
      baseMarkProps: baseMarkProps,
      className: className
    });
  });
};

exports.axisLines = axisLines;