"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _OrdinalFrame = _interopRequireDefault(require("./OrdinalFrame"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var someBarData = [{
  column: "a",
  cats: 15
}, {
  column: "a",
  cats: 20
}, {
  column: "b",
  cats: 30
}, {
  column: "c",
  cats: 100
}];
var htmlAnnotation = {
  column: "b",
  value: 30,
  type: "frame-hover"
};
var svgAnnotation = {
  column: "b",
  value: 30,
  type: "or"
};
describe("OrdinalFrame", function () {
  it("renders", function () {
    (0, _enzyme.mount)(_react.default.createElement(_OrdinalFrame.default, {
      data: someBarData,
      oAccessor: "column",
      rAccessor: "cats",
      disableContext: true
    }));
  });
  it("renders a <Frame>", function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_OrdinalFrame.default, {
      data: someBarData,
      oAccessor: "column",
      rAccessor: "cats",
      disableContext: true
    }));
    expect(wrapper.find("Frame").length).toEqual(1);
  });
  var projections = ["vertical", "horizontal", "radial"];
  var xValues = [250, 88.23529411764706, 250];
  var yValues = [411.7647058823529, 250, 265];
  var yMods = [10, 0, 0];
  var xMods = [0, 10, 0];
  projections.forEach(function (projection, index) {
    var mountedFrameWithAnnotation = (0, _enzyme.mount)(_react.default.createElement(_OrdinalFrame.default, {
      data: someBarData,
      oAccessor: "column",
      rAccessor: "cats",
      disableContext: true,
      annotations: [htmlAnnotation, svgAnnotation],
      projection: projection
    }));
    var svgAnnotationOR = mountedFrameWithAnnotation.find("g.annotation-or-label > text");
    it("renders an svg annotation", function () {
      expect(svgAnnotationOR.length).toEqual(1);
    });
    it("renders an html annotation", function () {
      expect(mountedFrameWithAnnotation.find("div.annotation.annotation-or-label").length).toEqual(1);
    });
    var htmlAnnotationStyle = mountedFrameWithAnnotation.find("div.annotation.annotation-or-label").getDOMNode().style;
    console.info("svgAnnotationOR", projection, svgAnnotationOR);
    console.info("htmlAnnotationStyle", projection, htmlAnnotationStyle);
    var x = xValues[index];
    var y = yValues[index];
    it("".concat(projection, " html and svg annotations have the same x & y positions for each"), function () {
      expect(svgAnnotationOR.props().x).toEqual(x + xMods[index]);
      expect(svgAnnotationOR.props().y).toEqual(y + yMods[index]);
      expect(htmlAnnotationStyle.left).toEqual("".concat(x, "px"));
      expect(htmlAnnotationStyle.top).toEqual("".concat(y, "px"));
    });
  });
});