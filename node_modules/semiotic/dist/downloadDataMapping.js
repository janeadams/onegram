"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cleanDates = function (value) {
    if (value && value.toJSON) {
        return value.toJSON();
    }
    return value;
};
exports.xyDownloadMapping = function (_a) {
    var data = _a.data, xAccessor = _a.xAccessor, yAccessor = _a.yAccessor, _b = _a.fields, fields = _b === void 0 ? [] : _b;
    var csvData = [];
    data.forEach(function (datum) {
        if (Array.isArray(datum)) {
            xAccessor.forEach(function (actualXAccessor) {
                yAccessor.forEach(function (actualYAccessor) {
                    datum.forEach(function (a) {
                        var row = {};
                        if (actualXAccessor) {
                            row.x = cleanDates(actualXAccessor(a));
                        }
                        else if (a.x) {
                            row.x = a.x;
                        }
                        if (actualYAccessor) {
                            row.y = cleanDates(actualYAccessor(a));
                        }
                        else if (a.y) {
                            row.y = a.y;
                        }
                        if (datum.id !== undefined)
                            row.id = datum.id;
                        if (fields && Array.isArray(fields)) {
                            fields.forEach(function (f) {
                                row[f] = cleanDates(a[f]);
                            });
                        }
                        csvData.push(row);
                    });
                });
            });
        }
        else {
            xAccessor.forEach(function (actualXAccessor) {
                yAccessor.forEach(function (actualYAccessor) {
                    var row = {};
                    if (actualXAccessor) {
                        row.x = cleanDates(actualXAccessor(datum.data));
                    }
                    else if (datum.x) {
                        row.x = datum.x;
                    }
                    if (actualYAccessor) {
                        row.y = cleanDates(actualYAccessor(datum.data));
                    }
                    else if (datum.y) {
                        row.y = datum.y;
                    }
                    if (datum.id !== undefined) {
                        row.id = datum.id;
                    }
                    if (actualXAccessor || actualYAccessor) {
                        fields.forEach(function (f) {
                            row[f] = datum.data[f];
                        });
                    }
                    else {
                        fields.forEach(function (f) {
                            row[f] = datum[f];
                        });
                    }
                    csvData.push(row);
                });
            });
        }
    });
    return csvData;
};
exports.orDownloadMapping = function (_a) {
    var data = _a.data, 
    //  columns,
    oAccessor = _a.oAccessor, rAccessor = _a.rAccessor, _b = _a.fields, fields = _b === void 0 ? [] : _b;
    var dataKeys = Object.keys(data);
    var csvData = [];
    oAccessor.forEach(function (actualOAccessor) {
        rAccessor.forEach(function (actualRAccessor) {
            dataKeys.forEach(function (key) {
                data[key].pieceData.forEach(function (piece) {
                    var row = {};
                    if (actualOAccessor) {
                        row.column = actualOAccessor(piece.data);
                    }
                    else if (piece.x) {
                        row.column = piece.x;
                    }
                    if (actualRAccessor) {
                        row.value = actualRAccessor(piece.data);
                    }
                    else if (piece.renderKey) {
                        row.value = piece.renderKey;
                    }
                    if (piece.id !== undefined)
                        row.id = piece.id;
                    fields.forEach(function (f) {
                        row[f] = cleanDates(piece.data[f]);
                    });
                    csvData.push(row);
                });
            });
        });
    });
    return csvData;
};
exports.networkNodeDownloadMapping = function (_a) {
    var data = _a.data, _b = _a.fields, fields = _b === void 0 ? [] : _b;
    var csvData = [];
    data.forEach(function (d) {
        var row = {};
        row.id = d.id;
        fields.forEach(function (f) {
            row[f] = d[f];
        });
        csvData.push(row);
    });
    return csvData;
};
exports.networkEdgeDownloadMapping = function (_a) {
    var data = _a.data, _b = _a.fields, fields = _b === void 0 ? [] : _b;
    var csvData = [];
    data.forEach(function (d) {
        var row = {};
        row.source = d.source.id;
        row.target = d.target.id;
        fields.forEach(function (f) {
            row[f] = d[f];
        });
        csvData.push(row);
    });
    return csvData;
};
//# sourceMappingURL=downloadDataMapping.js.map